package com.staples.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DbUtill {

	// static variable single_instance of type Singleton
	private static Connection connection_inst = null;

	// private constructor restricted to this class itself
	private DbUtill() {

	}
	
	static{
		try {
			Class.forName("com.ibm.as400.access.AS400JDBCDriver");
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		String url = "jdbc:as400://COSMOS;libraries=SFBASLIB";
		String uname = "DEVRZS";
		String pass = "Welcome123";

		if (connection_inst == null) {
			
			try {
				connection_inst = DriverManager.getConnection(url, uname, pass);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}  
	}

	// static method to create instance of Singleton class
	public static Connection getConnection() throws SQLException, ClassNotFoundException {
		
			return connection_inst;
		 

	}
}


package com.staples.springboot.controller;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.staples.util.DbUtill;
@RestController
class SurveyController {

	/*
	 * @Autowired DataService dataService;
	 */

	@GetMapping(value = "/FutureorderByFcData", produces = "application/json")
	public ArrayList getorderByFcData() throws Exception {

		String query = "select orploc, count(*)from SF028SLIB.sfordr where (ORORD#,ORLINK,ORSHP#)     \r\n"
				+ " in (select                                                         \r\n"
				+ "odord#,odlink,odshp# from SF028SLIB.sfordd where ODSKMA in ('CS','ST') except \r\n"
				+ "select odord#,odlink,odshp# from SF065DLIB.sfordd where ODDROP = ' ' and      \r\n"
				+ "ODSPEC = ' ' and ODSKMA in ('US','TP','IM','SR','AZ') and ODWOR# =  \r\n"
				+ "' ' ) and ORPSTA = 'AVL'        \r\n" +
				"group by orploc                                                     \r\n" + "order by orploc";
		
		String wlocQry = "select wwloc# from SF028SLIB.sfwhse";
		Connection con = DbUtill.getConnection();
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery(query);

		Statement stwloc = con.createStatement();
		ResultSet wlocRs = stwloc.executeQuery(wlocQry);

		String userData;

		ArrayList list = new ArrayList();

		while (rs.next()) {

			Map hm = new LinkedHashMap();
			wlocRs.next();
			hm.put("FC", wlocRs.getInt(1));

			hm.put("Stock_Count", rs.getInt(1));
			hm.put("wl_count", rs.getInt(2));

			list.add(hm);

		}

		st.close();

		return list;
	}

	public ResultSet getResultset(String query) throws SQLException, ClassNotFoundException {
        
		Connection connection = null;
		connection = DbUtill.getConnection();
		Statement stmt = connection.createStatement();
		ResultSet resultSet = stmt.executeQuery(query);
		return resultSet;
	}
	@GetMapping(value = "/orderByFc", produces = "application/json")
	
	public List<Map<String, Integer>> getorderByFcDataAVL() throws Exception {
		ResultSet fc = this.getResultset("SELECT ORPLOC, count(*) FROM SF028SLIB.sfordr WHERE ORPSTA = 'AVL' GROUP BY ORPLOC ORDER BY ORPLOC");

		List<Map<String, Integer>> finalList = new ArrayList<>();

		while (fc.next()) {
			// temp
			ResultSet fc_avl = this.getResultset("SELECT ORPLOC, count(*) FROM SF028SLIB.sfordr WHERE ORPSTA = 'AVL' GROUP BY ORPLOC ORDER BY ORPLOC");
			ResultSet fc_dst = this.getResultset("SELECT ORPLOC, count(*) FROM SF028SLIB.sfordr WHERE ORPSTA = 'DST' GROUP BY ORPLOC ORDER BY ORPLOC");
			ResultSet fc_trd = this.getResultset("SELECT ORPLOC, count(*) FROM SF028SLIB.sfordr WHERE  ORPSTA = 'TRD' GROUP BY ORPLOC ORDER BY ORPLOC");

			Integer fc_value = fc.getInt(1);
			Map<String, Integer> map1 = new LinkedHashMap<>();
			map1.put("FC", fc_value);
			map1.put("AVL", 0);
			map1.put("DST", 0);
			map1.put("TRD", 0);
			// avl
			while (fc_avl.next()) {
				if (fc_value == fc_avl.getInt(1)) {
					map1.put("AVL", fc_avl.getInt(2));
					break;

				}
			}
			// dst
			while (fc_dst.next()) {
				if (fc_value == fc_dst.getInt(1)) {
					map1.put("DST", fc_dst.getInt(2));
					break;
				}
			}

			// trd
			while (fc_trd.next()) {
				if (fc_value == fc_trd.getInt(1)) {
					map1.put("TRD", fc_trd.getInt(2));
					break;
				}
			}
			// add final map to list
			finalList.add(map1);

		}

		return finalList;
	}

		/*
		 * String query = "SELECT ORPLOC, count(*) FROM SF028SLIB.sfordr WHERE \n" +
		 * "ORPSTA = 'AVL' GROUP BY ORPLOC ORDER BY ORPLOC  \n"; Connection con =
		 * DbUtill.getConnection();
		 * 
		 * Statement avlStmt = con.createStatement(); ResultSet avlRs =
		 * avlStmt.executeQuery(query);
		 * 
		 * ArrayList list = new ArrayList();
		 * 
		 * while (avlRs.next()) { Map hm = new LinkedHashMap(); hm.put("FC",
		 * avlRs.getInt(1)); hm.put("AVL", avlRs.getInt(2));
		 * 
		 * list.add(hm); }
		 * 
		 * return list;
		 */
		/**/
		@GetMapping(value = "/productionDataMonitering", produces = "application/json")
		public Map<String,Integer> getproductiondata() throws Exception {
			//production data
			String cuorquery = "select count(*) from sf028slib.sfordh";
			String avorquery = "select ((count(*))/10) from sf028slib.sfordh";
			String culiquery = "select count(*) from sf028slib.sfordd";
			String avliquery = "select ((count(*))/10) from sf028slib.sfordd";
			String cudoquery = "select sum( OHNTO$ ) from sf028slib.sfordh";
			String avdoquery = "select (sum( OHNTO$ )/10) from sf028slib.sfordh";
			//Weekly Comparision
			String lwdorquery = "select sum( OHNTO$ ) from sf028slib.sfordh";
			String lwdoquery = "select sum( OHNTO$ ) from sf028slib.sfordh";
			String cwdorquery = "select sum( OHNTO$ ) from sf028slib.sfordh";
			String cwdoquery = "select sum( OHNTO$ ) from sf028slib.sfordh";
			String lworrquery = "select count(*) from sf028slib.sfordh ";
			String lworquery = "select count(*) from sf028slib.sfordh ";
			String cworrquery = "select count(*) from sf028slib.sfordh ";
			String cworquery = "select count(*) from sf028slib.sfordh ";

			Connection DSTcon = DbUtill.getConnection();

			Statement dstStmt = DSTcon.createStatement();
			ResultSet prs = dstStmt.executeQuery(cuorquery);
			prs.next();
			
			
			//Map
			Map<String,Integer> map=new LinkedHashMap<>();
				map.put("CurrentOrder", prs.getInt(1));
				prs=dstStmt.executeQuery(avorquery);
				prs.next();
				map.put("AverageOrder",prs.getInt(1) );
				prs=dstStmt.executeQuery(culiquery);
				prs.next();
				map.put("CurrentLine", prs.getInt(1));
				prs=dstStmt.executeQuery(avliquery);
				prs.next();
				map.put("AverageLine", prs.getInt(1));
				prs=dstStmt.executeQuery(cudoquery);
				prs.next();
				map.put("CurrentDollers", prs.getInt(1));
				prs=dstStmt.executeQuery(avdoquery);
				prs.next();
				map.put("AverageDollers", prs.getInt(1));
				
				//Weekly comparision
				prs=dstStmt.executeQuery(lwdorquery);
				prs.next();				
				map.put("LastWeekDollarsRR", prs.getInt(1));
				prs=dstStmt.executeQuery(lwdoquery);
				prs.next();
				map.put("LastWeekDollars",prs.getInt(1) );
				prs=dstStmt.executeQuery(cwdorquery);
				prs.next();
				map.put("currentWeekDollarsRR", prs.getInt(1));
				prs=dstStmt.executeQuery(cwdoquery);
				prs.next();
				map.put("currentWeekDollars", prs.getInt(1));
				prs=dstStmt.executeQuery(lworrquery);
				prs.next();
				map.put("LastWeekOrderRR", prs.getInt(1));
				prs=dstStmt.executeQuery(lworquery);
				prs.next();
				map.put("LastWeekOrder", prs.getInt(1));
				prs=dstStmt.executeQuery(cworrquery);
				prs.next();
				map.put("currentWeekOrderRR", prs.getInt(1));
				prs=dstStmt.executeQuery(cworquery);
				prs.next();
				map.put("currentWeekOrder", prs.getInt(1));
				
		
				/*/list of pairs
				List<Map<String,Integer>> list2=new ArrayList<>();
				
				//fetch data from map
				Set<String> keyMap=map.keySet();
				Iterator<String> itr=keyMap.iterator();
				//while(itr.hasNext()) {
					Map<String,Integer> map2=new HashMap<>();
					//1st pair
					String key=itr.next();
					Integer value=map.get(key);
					map2.put(key, value);
					//2nd pair
					//key=itr.next();
					//value=map.get(key);
					//map2.put(key, value);
					
					list2.add(map2);
					
				}*/
				//close connection
				DSTcon.close();
			return map;


		}
	}
